#!/usr/bin/python3
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import subprocess
import time

# import Cockpit's machinery for test VMs and its browser test API
TEST_DIR = os.path.dirname(__file__)
sys.path.append(os.path.join(TEST_DIR, "common"))
sys.path.append(os.path.join(os.path.dirname(TEST_DIR), "bots/machine"))
from testlib import *


INSTALL_RPMS = [
    "empty-1-0.noarch",
    "chrony-0.1-2.noarch",
    "tzdata-99999-2.noarch",
]

REPO_LOCATION = "/var/local-repo"
CHECKOUT_LOCATION = "/var/local-tree"
RPM_LOCATION = "/usr/share/rpm"
KEY_ID = "95A8BA1754D0E95E2B3A98A7EE15015654780CBD"

# old cockpit/ws container on rhel-atomic still has "[ ] Reuse my password for privileged tasks"
login_opts = {}
if os.environ.get("TEST_OS") == "rhel-atomic":
    login_opts["legacy_authorized"] = True


def get_list_item(index):
    # there are more <li> inside the item tables, so only count direct children
    return ".available-deployments > li:nth-child({0})".format(index)

def get_os_name(m):
    if m.image == "rhel-atomic":
        return "rhel-atomic-host"
    elif m.image == "fedora-coreos":
        return "fedora-coreos"
    elif 'continuous' in m.image:
        return 'centos-atomic-host'
    else:
        return "fedora-atomic"

def ensure_remote_http_port (m, remote="local"):
    remote_spec = m.execute("ostree remote show-url %s || true" % remote)
    if remote_spec.startswith("http"):
        parts = remote_spec.strip().split(":")
        port = parts[-1]
    else:
        if remote_spec:
            m.execute(["ostree", "remote", "delete", remote])
        m.execute(["ostree", "remote", "add", remote,
                   "http://127.0.0.1:12345", "--no-gpg-verify"])
        try:
            m.execute(["rpm-ostree reload"])
        except subprocess.CalledProcessError:
            m.execute("systemctl restart rpm-ostreed")
        port = 12345

    return port

def start_trivial_httpd(m, remote="local", location=REPO_LOCATION):
    port = ensure_remote_http_port (m, remote)
    pid = m.spawn("podman run -v {0}:/app:ro,z -p {1}:8080 nginx".format(location, port), "httpd")

    m.execute(["ostree", "summary", "--repo={}".format(location), "-u"])
    m.wait_for_cockpit_running(port=port)
    return pid

def stop_trivial_httpd(m, pid):
    if pid:
        m.execute(["kill", str(pid)])

def generate_new_commit(m, pkg_to_remove):
    # Make one change of each type to a new rpm tree
    branch = m.execute("ostree refs --repo={0}".format(REPO_LOCATION))

    m.upload(["files/{0}.rpm".format(k) for k in INSTALL_RPMS],
              "/home/admin/")

    # move /usr/etc to /etc, makes rpm installs easier
    rpm_etc = os.path.join(CHECKOUT_LOCATION, "etc")
    usr_etc = os.path.join(CHECKOUT_LOCATION, "usr", "etc")
    m.execute("mv {0} {1}".format(usr_etc, rpm_etc))

    # Remove a package
    rpm_args = [CHECKOUT_LOCATION, RPM_LOCATION, pkg_to_remove]
    m.execute("rpm -e --verbose --root {0} --dbpath {1} {2}".format(*rpm_args))

    # Install our dummy packages, dbonly
    rpm_args[-1] = ' '.join(["{0}.rpm".format(os.path.join("/home/admin", x)) \
                                for x in INSTALL_RPMS])
    m.execute("rpm -U --oldpackage --root {0} --dbpath {1} --justdb {2}".format(*rpm_args))

    # move /etc back to /usr/etc to
    m.execute("mv {0} {1}".format(rpm_etc, usr_etc))

    # Upload a signing key
    m.upload(["files/secring.gpg",
              "files/pubring.gpg"], "/root/")

    commit_args = [REPO_LOCATION, branch.strip(), CHECKOUT_LOCATION, KEY_ID]
    command = "ostree commit -s cockpit-tree2 --repo {0} -b {1} --add-metadata-string version=cockpit-base.2 --tree=dir={2} --gpg-sign={3} --gpg-homedir=/root/"
    m.execute(command.format(*commit_args), timeout=600)
    m.execute(["ostree", "summary", "--repo={}".format(REPO_LOCATION), "-u"])

def rhsmcertd_hack(m):
    # HACK: https://github.com/candlepin/subscription-manager/issues/1404
    m.execute("systemctl disable rhsmcertd || true")
    m.execute("systemctl stop rhsmcertd || true")


class OstreeRestartCase(MachineCase):
    def switch_to_packages(self, b, sel, required_classes):
        b.wait_not_present("{0} div.packages".format(sel))
        b.click('{0} ul li a:contains("Packages")'.format(sel))
        b.wait_visible("{0} div.packages".format(sel))
        for c in required_classes:
            b.wait_present("{0} div.packages dl.{1}".format(sel, c))

    def check_change_counts(self, b, sel):
        for k in ['adds', 'removes']:
            b.call_js_func("ph_count_check", "{0} dl.{1} dd".format(sel, k),  1)
        # 1 or 2, in some scenarios cockpit-ostree gets up/downgraded as well
        self.assertIn(b.call_js_func("ph_count", "{0} dl.{1} dd".format(sel, 'up')), [1, 2])
        self.assertIn(b.call_js_func("ph_count", "{0} dl.{1} dd".format(sel, 'down')), [1, 2])

    def check_sig(self, b, sel):
        b.wait_not_present("{0} div.signatures".format(sel))
        b.click('{0} ul li a:contains("Signature")'.format(sel))
        b.wait_visible("{0} div.signatures".format(sel))
        b.wait_in_text("{0} div.signatures".format(sel), KEY_ID)
        b.wait_in_text("{0} div.signatures".format(sel), "RSA")
        b.wait_in_text("{0} div.signatures".format(sel), "Cockpit Tester <do-not-reply@cockpit-project.org>")
        b.wait_in_text("{0} div.signatures".format(sel), "Good Signature")
        b.wait_in_text("{0} div.signatures".format(sel), "When")

    def testOstree(self):
        b = self.browser
        m = self.machine

        # Delete local remote so we start clean, without a file based remote
        ensure_remote_http_port (m)

        if m.image in ["fedora-coreos"]:
            remove_pkg = m.execute("rpm -qa | grep socat").strip()
        else:
            remove_pkg = m.execute("rpm -qa | grep cockpit-docker").strip()

        rhsmcertd_hack(m)

        chrony = m.execute("rpm -qa | grep chrony").strip()
        tzdata = m.execute("rpm -qa | grep tzdata").strip()

        m.start_cockpit()
        b.login_and_go("/updates", **login_opts)
        b.enter_page("/updates")

        name = get_os_name(m)

        # Check current and rollback target
        sel_cur = get_list_item(1)
        sel_prev = get_list_item(2)
        sel_nonexist = get_list_item(3)
        b.wait_text(sel_cur + ' .deployment-name', name + " cockpit-base.1")
        b.wait_in_text(sel_cur + ' .deployment-status', "Running")
        b.wait_not_present(sel_cur + ' button.pf-m-secondary')

        b.wait_visible(sel_cur + " div.tree")
        b.wait_in_text(sel_cur + " .os", name)
        b.wait_in_text(sel_cur + " .version", "cockpit-base.1")
        self.switch_to_packages(b, sel_cur, ['rpms-col1', 'rpms-col2'])
        b.wait_in_text(sel_cur + " div.packages", remove_pkg)
        for pkg in INSTALL_RPMS:
            b.wait_not_in_text(sel_cur + " div.packages", pkg)

        b.wait_not_present(sel_cur + " div.signatures")
        b.click(sel_cur + ' ul li a:contains("Signature")')
        b.wait_in_text(sel_cur + ' div.signatures', "No signature available")

        # Require signatures
        m.execute("sed -i /gpg-verify/d /etc/ostree/remotes.d/local.conf")
        # HACK: rpm-ostree doesn't reload remote settings properly
        # https://github.com/projectatomic/rpm-ostree/issues/401
        m.execute("systemctl restart rpm-ostreed")

        b.wait_not_in_text(sel_prev + ' .deployment-name', "cockpit")
        b.wait_in_text(sel_prev + ' .deployment-status', "Available")
        b.wait_in_text(sel_prev + " button.pf-m-secondary", "Roll Back")
        b.wait_in_text(sel_prev + " .os", name)
        b.wait_visible(sel_prev + " div.tree")
        b.wait_not_present(sel_prev + " div.packages")

        # Check for new commit, get error
        b.wait_in_text("#check-for-updates-btn", "Check for Updates")
        b.click("#check-for-updates-btn")
        b.wait_present('#app .pf-c-alert.pf-m-warning')
        b.wait_present("#check-for-updates-btn:not(disabled)")

        # Serve repo
        server_pid = start_trivial_httpd(m)

        # Check for new commit
        b.click("#check-for-updates-btn")
        b.wait_present("#check-for-updates-btn:disabled")
        b.wait_present("#check-for-updates-btn:not(disabled)")

        # Generate new commit
        generate_new_commit(m, remove_pkg)

        # Check again not trusted
        b.click("#check-for-updates-btn")
        b.wait_present("#check-for-updates-btn:not(disabled)")
        # newer Fedora CoreOS says "public key not found", older RHEL/CentOS says "[sig exists], but none are in trusted keyring"
        sel = "#app .pf-c-alert.pf-m-warning:nth-child(3)"
        b.wait_present(sel)
        b.wait_js_cond("ph_in_text('{0}', 'none are in trusted keyring') || ph_in_text('{0}', 'public key not found') || ph_in_text('{0}', 'no signatures found')".format(sel))

        m.upload(["files/publickey.asc"], "/root/")
        m.execute("ostree remote gpg-import local -k /root/publickey.asc")

        # Check again have update data
        b.click("#check-for-updates-btn")
        b.wait_in_text('{0} .deployment-status'.format(get_list_item(1)), "Available")
        b.wait_in_text("{0} button.pf-m-secondary".format(get_list_item(1)), "Update")
        b.wait_in_text('{0} .deployment-status'.format(get_list_item(2)), "Running")

        # Check update data
        b.wait_visible("{0} div.tree".format(get_list_item(1)))
        b.wait_in_text("{0} .os".format(get_list_item(1)), name)
        b.wait_in_text("{0} .version".format(get_list_item(1)), "cockpit-base.2")

        self.switch_to_packages(b, ".available-deployments li:nth-child(1)",
                                ['up', 'down',
                                 'adds', 'removes'])
        self.check_change_counts(b, ".available-deployments li:nth-child(1)")

        b.wait_in_text("{0} dl.up dd".format(get_list_item(1)), "tzdata-99999-2.noarch")
        b.wait_in_text("{0} dl.down dd:first-of-type".format(get_list_item(1)), "chrony-0.1-2.noarch")
        b.wait_text("{0} dl.adds dd".format(get_list_item(1)), "empty-1-0.noarch")
        b.wait_text("{0} dl.removes dd".format(get_list_item(1)), remove_pkg)

        # Check signatures
        self.check_sig (b, ".available-deployments li:nth-child(1)")

        # Force an error
        stop_trivial_httpd(m, server_pid)
        b.wait_not_present('{0} .deployment-error'.format(get_list_item(1)))
        b.wait_not_present("{0} button.pf-m-secondary:disabled".format(get_list_item(1)))
        b.click("{0} button.pf-m-secondary".format(get_list_item(1)))
        b.wait_present("{0} button.pf-m-secondary:disabled".format(get_list_item(1)))
        b.wait_present("{0} button.pf-m-secondary:not(disabled)".format(get_list_item(1)))
        b.wait_present('{0} .deployment-error'.format(get_list_item(1)))
        server_pid = start_trivial_httpd(m)

        # Apply update
        b.click("{0} button.pf-m-secondary".format(get_list_item(1)))
        b.wait_in_text("{0} .deployment-status".format(get_list_item(1)), "Updating")
        b.wait_not_present('{0} .deployment-error'.format(get_list_item(1)))

        b.switch_to_top()
        with b.wait_timeout(120):
            b.wait_visible(".curtains-ct")

        b.wait_in_text(".curtains-ct h1", "Disconnected")

        m.wait_reboot()
        m.start_cockpit()
        b.reload()
        b.login_and_go("/updates", **login_opts)

        # After reboot, check commit
        b.wait_present('.available-deployments')
        b.wait_text(sel_cur + ' .deployment-name', name + " cockpit-base.2")
        b.wait_in_text(sel_cur + ' .deployment-status', "Running")
        b.wait_not_present(sel_cur + " button.pf-m-secondary")
        self.switch_to_packages(b, sel_cur, ['rpms-col1', 'rpms-col2'])
        b.wait_not_in_text(sel_cur + " div.packages", remove_pkg)
        for pkg in INSTALL_RPMS:
            b.wait_in_text(sel_cur + " div.packages", pkg)

        # Check signatures
        self.check_sig (b, sel_cur)

        # Check rollback target
        b.wait_text(sel_prev + ' .deployment-name', name + " cockpit-base.1")
        b.wait_in_text(sel_prev + ' .deployment-status', "Available")
        b.wait_in_text(sel_prev + ' button.pf-m-secondary', "Roll Back")
        b.wait_in_text(sel_prev + ' .os', name)
        self.switch_to_packages(b, sel_prev,
                                ['up', 'down',
                                 'adds', 'removes'])
        self.check_change_counts(b, sel_prev)

        b.wait_in_text(sel_prev + " dl.up dd", chrony)
        b.wait_text(sel_prev + " dl.down dd", tzdata)
        b.wait_text(sel_prev + " dl.adds dd", remove_pkg)
        b.wait_text(sel_prev + " dl.removes dd", "empty-1-0.noarch")

        # Rollback
        b.wait_present("button:contains('Roll Back')");
        b.click(sel_prev + " button.pf-m-secondary")
        b.wait_present(sel_prev + " .deployment-status")

        b.switch_to_top()
        with b.wait_timeout(120):
            b.wait_visible(".curtains-ct")

        b.wait_in_text(".curtains-ct h1", "Disconnected")
        m.wait_reboot()
        m.start_cockpit()
        b.reload()
        b.login_and_go("/updates", **login_opts)

        b.wait_text(sel_cur + " .deployment-name", name + " cockpit-base.1")
        b.wait_in_text(sel_cur + " .deployment-status", "Running")

        b.wait_in_text(sel_prev + " .deployment-status", "Available")
        b.wait_text(sel_prev + " .deployment-name", name + " cockpit-base.2")
        b.wait_in_text(sel_prev + " .pf-c-data-list__item-content button.pf-m-secondary", "Roll Back")

        b.wait_not_present(sel_nonexist)

        self.allow_restart_journal_messages()
        self.allow_authorize_journal_messages()

    def testRebase(self):
        m = self.machine
        b = self.browser

        name = get_os_name(m)

        start_trivial_httpd(m)
        branch = m.execute("ostree refs --repo={0}".format(REPO_LOCATION)).strip()

        # Add a new branch to the default repo
        m.execute(["ostree", "commit", "--repo={}".format(REPO_LOCATION),
                   "-b", "znew-branch", "--tree=ref={}".format(branch),
                   "--add-metadata-string", "version=branch-version"], timeout=600)
        m.execute(["ostree", "summary", "--repo={}".format(REPO_LOCATION), "-u"])

        rhsmcertd_hack(m)
        m.start_cockpit()
        b.login_and_go("/updates", **login_opts)
        b.enter_page("/updates")

        b.wait_text("#change-repo", "local")
        b.wait_in_text("#change-branch", branch)
        # open the branches menu to see the entries
        b.click("#change-branch")
        b.wait_not_in_text("#change-branch + ul li:first-child button", "error")
        b.wait_in_text("#change-branch + ul li:last", "znew-branch")
        b.call_js_func("ph_count_check", "#change-branch + ul li",  2)
        b.click("#change-branch + ul li:last button")
        b.wait_text('{0} .deployment-name'.format(get_list_item(1)), name + " cockpit-base.1")
        b.wait_in_text('{0} .deployment-status'.format(get_list_item(1)), "Running")
        b.wait_in_text("{0} .origin".format(get_list_item(1)), "local:{}".format(branch))

        b.wait_in_text("#check-for-updates-btn", "Check for Updates")
        b.click("#check-for-updates-btn")

        b.wait_text('{0} .deployment-name'.format(get_list_item(1)), name + " branch-version")
        b.wait_in_text('{0} .deployment-status'.format(get_list_item(1)), "Available")
        b.wait_in_text("{0} button.pf-m-secondary".format(get_list_item(1)), "Rebase")
        b.wait_in_text("{0} .os".format(get_list_item(1)), name)
        b.wait_in_text("{0} .origin".format(get_list_item(1)), "local:znew-branch")

        b.wait_not_present("{0} div.packages".format(get_list_item(1)))
        b.click('{0} ul li a:contains("Packages")'.format(get_list_item(1)))
        b.wait_visible("{0} div.packages".format(get_list_item(1)))
        # Atomics have cockpit-ostree preinstalled, FCOS doesn't
        if m.image not in ["fedora-coreos"]:
            b.wait_in_text("{0} div.packages".format(get_list_item(1)), "cockpit-ostree")

        # wait until the button has stabilized
        for retry in range(3):
            b.wait_present("{0} button.pf-m-secondary:not([disabled])".format(get_list_item(1)))
            time.sleep(1)

        # Apply update
        b.click("{0} button.pf-m-secondary".format(get_list_item(1)))
        b.wait_in_text("{0} .deployment-status".format(get_list_item(1)), "Updating")
        b.wait_not_present('{0} .deployment-error'.format(get_list_item(1)))

        b.switch_to_top()
        with b.wait_timeout(120):
            b.wait_visible(".curtains-ct")

        b.wait_in_text(".curtains-ct h1", "Disconnected")
        m.wait_reboot()
        m.start_cockpit()
        b.reload()
        b.login_and_go("/updates", **login_opts)

        # After reboot, check commit
        sel = get_list_item(1)
        b.wait_text(sel + ' .deployment-name', name + " branch-version")
        b.wait_in_text(sel + ' .deployment-status', "Running")
        b.wait_in_text(sel + ' .origin', "local:znew-branch")

        self.allow_restart_journal_messages()
        self.allow_authorize_journal_messages()

class OstreeCase(MachineCase):
    def testRemoteManagement(self):
        m = self.machine
        b = self.browser

        name = get_os_name(m)

        start_trivial_httpd(m)
        branch = m.execute("ostree refs --repo={0}".format(REPO_LOCATION)).strip()

        rhsmcertd_hack(m)
        m.start_cockpit()
        b.login_and_go("/updates", **login_opts)
        b.enter_page("/updates")

        b.wait_not_present('#app .pf-c-alert.pf-m-warning')
        b.wait_in_text("#change-branch", branch)
        # open the branches menu to see the entries
        b.click("#change-branch")
        b.wait_not_in_text("#change-branch + ul li:first-child button", "error")
        b.call_js_func("ph_count_check", "#change-branch + ul li",  1)
        b.wait_in_text("#change-branch + ul li", branch)
        b.click("#change-branch")
        b.wait_text("#change-repo", "local")
        b.click("#change-repo")

        b.wait_in_text(".pf-c-modal-box h1", "Change Repository")
        b.wait_in_text(".pf-c-modal-box .pf-c-simple-list .pf-m-current", "local")
        b.wait_in_text(".pf-c-modal-box li:last", "Add New Repository")

        b.click(".pf-c-modal-box li:last button")
        b.click(".pf-c-modal-box #new-gpg-verify")
        b.set_input_text(".pf-c-modal-box #new-remote-url", "http://localhost:12344")
        b.set_input_text(".pf-c-modal-box #new-remote-name", "zremote test")
        b.click(".pf-c-modal-box #add-remote-btn")
        b.wait_in_text(".pf-c-modal-box .pf-c-simple-list__item-link .pf-m-danger", "Invalid remote name")
        b.set_input_text(".pf-c-modal-box #new-remote-name", "zremote-test1")
        b.click(".pf-c-modal-box #add-remote-btn")

        b.wait_not_present (".pf-c-modal-box #new-remote-name")
        b.wait_not_present(".pf-c-modal-box #add-remote-btn")
        b.wait_not_present(".pf-c-modal-box .pf-c-modal-box__footer button:disabled")
        b.wait_present(".pf-c-modal-box .pf-c-modal-box__footer button.pf-m-primary")
        b.wait_in_text(".pf-c-modal-box .pf-c-simple-list .pf-m-current", "local")
        b.wait_in_text(".pf-c-modal-box li:last button", "Add New Repository")
        b.click(".pf-c-modal-box #zremote-test1 a")

        b.click(".pf-c-modal-box .pf-c-modal-box__footer button.pf-m-primary")
        b.wait_not_present(".pf-c-modal-box")

        b.wait_text("#change-repo", "zremote-test1")
        # Branch is still default
        b.wait_in_text("#change-branch", branch)
        # But can't list
        b.click("#change-branch")
        # Actual error message changes between versions
        b.wait_in_text("#change-branch + ul li button", "error: While fetching")

        # Config created
        self.assertEqual(m.execute("cat /etc/ostree/remotes.d/zremote-test1.conf").strip(),
                        '[remote "zremote-test1"]\nurl=http://localhost:12344\ngpg-verify=true')
        # No custom keyring
        self.assertFalse(m.execute("ls /sysroot/ostree/repo/zremote-test1.trustedkeys.gpg || true"))

        # Refresh goes back to default
        b.reload()
        b.enter_page("/updates")
        b.wait_text("#change-repo", "local")
        b.wait_in_text("#change-branch", branch)

        # Create a new remote with commits, just use the rpm dir
        zrepo = "/var/zrepo"
        m.execute("mkdir -p {}".format(zrepo))
        m.execute("mkdir -p /tmp/rpm-data/usr/share")
        m.execute("cp -r /usr/share/rpm /tmp/rpm-data/usr/share/")
        m.execute(["ostree", "init", "--repo", zrepo, "--mode", "archive-z2"])
        m.execute(["ostree", "commit", "--repo={}".format(zrepo),
                   "-b", "zremote-branch1", "--orphan", "--tree=dir=/tmp/rpm-data",
                   "--add-metadata-string", "version=zremote-branch1.1"], timeout=600)
        m.execute(["ostree", "commit", "--repo={}".format(zrepo),
                   "-b", "zremote-branch2", "--orphan", "--tree=dir=/tmp/rpm-data",
                   "--add-metadata-string", "version=zremote-branch2.1"], timeout=600)
        start_trivial_httpd(m, remote="zremote-test1", location=zrepo)

        # Add a new branch to the default repo
        m.execute(["ostree", "commit", "--repo={}".format(REPO_LOCATION),
                   "-b", branch, "--tree=ref={}".format(branch),
                   "--add-metadata-string", "version=bad-version"], timeout=600)
        m.execute(["ostree", "summary", "--repo={}".format(REPO_LOCATION), "-u"])

        # Edit
        b.click("#change-repo")
        b.click(".pf-c-modal-box li:contains('zremote-test1') button.pf-m-secondary.edit-remote")
        b.wait_present(".pf-c-modal-box .pf-c-modal-box__footer button:disabled")
        b.wait_present(".pf-c-modal-box #edit-remote-url[value='http://localhost:12344']")
        b.wait_present(".pf-c-modal-box .pf-c-form #gpg-verify:checked")
        b.wait_not_present(".pf-c-modal-box #gpg-data")
        b.click(".pf-c-modal-box .pf-c-form button.pf-m-secondary")
        b.wait_not_present(".pf-c-modal-box .pf-c-form button.pf-m-secondary")
        b.set_input_text(".pf-c-modal-box #gpg-data", "bad")
        b.click(".pf-c-modal-box .apply-btn")
        b.wait_present(".pf-c-modal-box div.pf-m-danger")

        with open(os.path.join(TEST_DIR, "files", "publickey.asc"), 'r') as fp:
            gpg_data = fp.read()

        b.set_val(".pf-c-modal-box #gpg-data", gpg_data)
        b.wait_val(".pf-c-modal-box #gpg-data", gpg_data)
        b.focus(".pf-c-modal-box #gpg-data")
        b.key_press("\b") # Backspace
        b.click(".pf-c-modal-box .apply-btn")
        b.wait_not_present(".pf-c-modal-box #apply-btn")
        b.wait_not_present(".pf-c-modal-box .pf-c-form")
        b.wait_present(".pf-c-modal-box .pf-c-modal-box__footer button:not(disabled)")
        m.execute("ls /sysroot/ostree/repo/zremote-test1.trustedkeys.gpg")

        b.click(".pf-c-modal-box li:contains('zremote-test1') .edit-remote")
        b.wait_present(".pf-c-modal-box .pf-c-modal-box__footer button:disabled")
        b.wait_present(".pf-c-modal-box .apply-btn")
        b.wait_present(".pf-c-modal-box #edit-remote-url[value='http://localhost:12344']")
        b.wait_present(".pf-c-modal-box #gpg-verify:checked")
        b.click(".pf-c-modal-box #gpg-verify")
        b.click(".pf-c-modal-box .apply-btn")
        b.wait_not_present (".pf-c-modal-box .pf-c-form")
        b.wait_not_present(".pf-c-modal-box .pf-c-modal-box__footer button:disabled")
        b.click(".pf-c-modal-box li:contains('zremote-test1')")
        b.click(".pf-c-modal-box .pf-c-modal-box__footer button.pf-m-primary")
        b.wait_not_present(".pf-c-modal-box")

        b.wait_text("#change-repo", "zremote-test1")
        b.wait_in_text("#change-branch", "zremote-branch1")
        b.click("#change-branch")
        b.wait_in_text("#change-branch + ul li:nth-child(1) button", "zremote-branch1")
        b.wait_in_text("#change-branch + ul li:nth-child(2) button", "zremote-branch2")
        b.call_js_func("ph_count_check", "#change-branch + ul li",  2)

        self.assertEqual(m.execute("cat /etc/ostree/remotes.d/zremote-test1.conf").strip(),
                         '[remote "zremote-test1"]\nurl=http://localhost:12344\ngpg-verify = false')

        # Check updates display
        b.wait_text('{0} .deployment-name'.format(get_list_item(1)), name + " cockpit-base.1")
        b.wait_in_text("{0} #osorigin".format(get_list_item(1)), "local:{}".format(branch))


        b.click("#check-for-updates-btn")

        b.wait_text('{0} .deployment-name'.format(get_list_item(1)), name + " zremote-branch1.1")
        b.wait_in_text('{0} .deployment-status'.format(get_list_item(1)), "Available")
        b.wait_in_text("{0} button.pf-m-secondary".format(get_list_item(1)), "Rebase")
        b.wait_in_text("{0} #osname".format(get_list_item(1)), name)
        b.wait_in_text("{0} #osorigin".format(get_list_item(1)), "zremote-test1:zremote-branch1")

        b.wait_not_present("{0} .packages".format(get_list_item(1)))
        b.click('{0} li.pf-c-nav__item a:contains("Packages")'.format(get_list_item(1)))
        b.wait_in_text("{0} .packages".format(get_list_item(1)), "contains the same packages as your currently booted")

        # Switching back shows pulled
        b.wait_in_text("#change-branch + ul li:first button", "zremote-branch1")
        b.click("#change-branch + ul li:first button")
        b.wait_text('{0} .deployment-name'.format(get_list_item(1)), name + " zremote-branch1.1")

        # Refresh, back to local, pull in update
        b.reload()
        b.enter_page("/updates")
        b.wait_in_text("#change-branch", branch)
        b.click("#check-for-updates-btn")
        b.wait_present("{0} button.pf-m-secondary".format(get_list_item(1)))
        b.wait_text('{0} .deployment-name'.format(get_list_item(1)), name + " bad-version")

        # Switching to branch shows pulled
        b.wait_text("#change-repo", "local")
        b.click("#change-repo")
        b.wait_present(".pf-c-modal-box .pf-c-simple-list")
        b.click(".pf-c-modal-box #zremote-test1 a")
        b.click(".pf-c-modal-box .pf-c-modal-box__footer button.pf-m-primary")
        b.wait_not_present(".pf-c-modal-box")

        b.wait_text("#change-repo", "zremote-test1")
        b.wait_in_text("#change-branch", "zremote-branch1")
        b.wait_text('{0} .deployment-name'.format(get_list_item(1)), name + " zremote-branch1.1")
        b.wait_text('{0} .deployment-status'.format(get_list_item(1)), "Available")
        b.wait_not_in_text('{0} .deployment-name'.format(get_list_item(1)), name + " bad-version")

        # delete
        b.click("#change-repo")
        b.wait_in_text(".pf-c-modal-box #zremote-test1", "zremote-test1")
        b.click(".pf-c-modal-box #zremote-test1 .edit-remote")
        b.wait_present(".pf-c-modal-box button.pf-m-danger")
        b.wait_present(".pf-c-modal-box .pf-c-modal-box__footer button:disabled")
        b.wait_present(".pf-c-modal-box #edit-remote-url[value='http://localhost:12344']")
        b.wait_present("#gpg-verify")
        b.wait_present(".pf-c-modal-box .pf-c-form #gpg-verify:not(:checked)")
        b.click(".pf-c-modal-box button.pf-m-danger")
        b.wait_not_present(".pf-c-modal-box .pf-c-form")

        b.wait_not_in_text(".pf-c-modal-box .pf-c-simple-list", "zremote-test1")
        b.wait_in_text(".pf-c-modal-box .pf-c-simple-list", "local")
        b.wait_not_present(".pf-c-modal-box .pf-c-simple-list .pf-m-current")
        b.wait_present(".pf-c-modal-box .pf-c-modal-box__footer button:disabled")
        b.click(".pf-c-modal-box #local a")
        b.wait_present(".pf-c-modal-box .pf-c-simple-list .pf-m-current")
        b.click(".pf-c-modal-box .pf-c-modal-box__footer button.pf-m-primary")
        b.wait_not_present(".pf-c-modal-box")
        b.wait_text("#change-repo", "local")
        b.wait_in_text("#change-branch", branch)
        b.click("#change-branch")
        b.wait_not_in_text("#change-branch + ul li:first-child button", "error")
        b.call_js_func("ph_count_check", "#change-branch + ul li",  1)
        b.wait_text('{0} .deployment-name'.format(get_list_item(1)), name + " bad-version")
        b.wait_in_text('{0} .deployment-status'.format(get_list_item(1)), "Available")
        b.wait_in_text("{0} .origin".format(get_list_item(1)), "local:{}".format(branch))

        self.allow_authorize_journal_messages()

    def testPermission(self):
        m = self.machine
        b = self.browser

        rhsmcertd_hack(m)

        # Create a user
        m.execute("useradd user -c 'User' || true")
        m.execute("echo foobar | passwd --stdin user")

        # login
        m.start_cockpit()
        b.open("/updates")
        b.wait_visible("#login")
        b.set_val("#login-user-input", "user")
        b.set_val("#login-password-input", "foobar")
        b.click('#login-button')
        b.expect_load()

        b.enter_page("/updates")

        b.wait_in_text(".pf-c-empty-state__body", "Not authorized")
        self.assertIn("Reconnect", b.text(".pf-c-empty-state button"))
        self.allow_authorize_journal_messages()

    @skipImage("Too old cockpit-system", "rhel-atomic", "continuous-atomic")
    def testPageStatus(self):
        m = self.machine
        b = self.browser

        rhsmcertd_hack(m)

        # preloading works, no updates available
        m.start_cockpit()
        b.login_and_go("/system", **login_opts)
        b.wait_text("#page_status_notification_updates", "System is up to date")
        self.assertEqual(b.attr("#page_status_notification_updates span:first-child", "class"),
                         "fa fa-check-circle-o")
        # go to updates page
        b.click("#page_status_notification_updates a")
        b.enter_page("/updates")

        # now generate an update
        remove_pkg = m.execute("rpm -qa | grep socat").strip()
        generate_new_commit(m, remove_pkg)
        m.upload(["files/publickey.asc"], "/root/")
        m.execute("ostree remote gpg-import local -k /root/publickey.asc")

        # updates page sees the new version
        b.click("#check-for-updates-btn")
        b.wait_in_text(get_list_item(1) + " .version", "cockpit-base.2")

        # overview page notices the new version as well
        b.go("/system")
        b.enter_page("/system")
        b.wait_in_text("#page_status_notification_updates", "Update available:")
        b.wait_in_text("#page_status_notification_updates", "cockpit-base.2")

        # check with new session
        b.logout()
        b.login_and_go("/system", **login_opts)
        b.wait_in_text("#page_status_notification_updates", "Update available:")
        b.wait_in_text("#page_status_notification_updates", "cockpit-base.2")

        self.allow_authorize_journal_messages()


if __name__ == "__main__":
    test_main()
